
name: Python application

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - run: |
        git fetch --prune --unshallow
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.10.16
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd python-app
        pip install -r requirements.txt
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: build
    steps:
     - name: Lint Python Code
       run: |
        pip install flake8
         # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
         # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  test:
    name: Test Python Code
    runs-on: ubuntu-latest
    needs: lint
    steps:
     - name: Checkout code
       uses: actions/checkout@v3
     - name: Install dependencies
       run: |
        pip install -r python-app/requirements.txt

     - name: Debug directory contents
       run: |
        ls -R python-app

     - name: Run tests
       run: |
        export PYTHONPATH=$(pwd)/python-app/src
        pytest python-app/tests/

  scan:
    name: Scan Code with SonarQube (Dummy)
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Dummy SonarQube Scan
        run: |
          echo "SonarQube scanning step is a placeholder. Configure with actual credentials and server details when available."      

  artifact:
    name: Publish Artifacts to JFrog
    runs-on: ubuntu-latest
    needs: scan
    steps:
      - name: Create Artifact
        run: |
         echo "Zipping artifact to JFrog..."
   #      zip -r artifact.zip .
          
      - name: Upload Artifact to JFrog
        run: |
          echo "Uploading artifact to JFrog..."
          # Placeholder for JFrog upload command
       
    # - name: Deploy to Heroku
    #   env:
    #     HEROKU_API_TOKEN: ${{ secrets.HEROKU_API_TOKEN }}
    #     HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
    #   if: github.ref == 'refs/heads/master' && job.status == 'success'
    #   run: |
    #     git remote add heroku https://heroku:$HEROKU_API_TOKEN@git.heroku.com/$HEROKU_APP_NAME.git
    #     git push heroku HEAD:master -f

